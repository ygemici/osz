/*
 * core/x86_64/ibmpc/isrs.S - GENERATED BY isrs.sh DO NOT EDIT THIS FILE
 *
 * Copyright 2016 CC-by-nc-sa-4.0 bztsrc@github
 * https://creativecommons.org/licenses/by-nc-sa/4.0/
 *
 * You are free to:
 *
 * - Share — copy and redistribute the material in any medium or format
 * - Adapt — remix, transform, and build upon the material
 *     The licensor cannot revoke these freedoms as long as you follow
 *     the license terms.
 *
 * Under the following terms:
 *
 * - Attribution — You must give appropriate credit, provide a link to
 *     the license, and indicate if changes were made. You may do so in
 *     any reasonable manner, but not in any way that suggests the
 *     licensor endorses you or your use.
 * - NonCommercial — You may not use the material for commercial purposes.
 * - ShareAlike — If you remix, transform, or build upon the material,
 *     you must distribute your contributions under the same license as
 *     the original.
 *
 * @brief Interrupt Controller specific Interrupt Service Routines
 */
#include "../arch.h"
#include <errno.h>
#include <syscall.h>
#include <limits.h>
#include "platform.h"
#include "../isr.h"
#include "../ccb.h"
#include "../tcb.h"

.global isr_inithw
.global isr_exc00divzero
.global isr_irq0
.global isr_irqtmr
.global isr_irqtmr_rtc
.global isr_irqtmrcal
.global isr_irqtmrcal_rtc
.global isr_enableirq
.global isr_disableirq

.section .data
    .align	16
idt64:
    .word	(32+32)*16-1
    .quad	0
    .align	8
ctrl:
    .asciz "PIC"
    .align 8
nopic:
    .asciz	"%s not supported"

.section .text
/* void isr_enableirq(uint64_t irq) */
isr_enableirq:
    movl	%edi, %ecx
    andw	$0xF, %cx
    cmpb	$8, %cl
    jae		1f
    inb		$PIC_MASTER_DATA, %al
    btrw	%cx, %ax
    outb	%al, $PIC_MASTER_DATA
    ret
1:  subb	$8, %cl
    inb		$PIC_SLAVE_DATA, %al
    btrw	%cx, %ax
    outb	%al, $PIC_SLAVE_DATA
    ret

/* void isr_disableirq(uint64_t irq) */
isr_disableirq:
    cmpl	$2, %edi
    je		1f
    movl	%edi, %ecx
    andw	$0xF, %cx
    cmpl	$8, %edi
    jae		2f
    inb		$PIC_MASTER_DATA, %al
    btsw	%cx, %ax
    outb	%al, $PIC_MASTER_DATA
1:  ret
2:  subb	$8, %cl
    inb		$PIC_SLAVE_DATA, %al
    btsw	%cx, %ax
    outb	%al, $PIC_SLAVE_DATA
    ret

/* set up gates and msrs, enable interrupt controller */
isr_inithw:
/* TSS64 descriptor in GDT */
    movq	$gdt64_tss, %rbx
    movl	%esi, %eax
    andl	$0xFFFFFF, %eax
    addl	%eax, 2(%rbx)
    movq	%rsi, %rax
    shrq	$24, %rax
    addq	%rax, 7(%rbx)
/* setup task register */
    movl	$0x28 + 3, %eax
    ltr		%ax
/* IDTR */
    movq	$idt64, %rax
    movq	%rdi, 2(%rax)
    lidt	(%rax)
/* setup syscall dispatcher */
    /* STAR */
    xorq	%rcx, %rcx
    movl	$0xC0000081, %ecx
    xorl	%eax, %eax
    movl	$0x00130008, %edx
    wrmsr
    /* LSTAR */
    incl	%ecx
    movq	$isr_syscall, %rax
    movq	%rax, %rdx
    shrq	$32, %rdx
    wrmsr
    /* SFMASK */
    incl	%ecx
    incl	%ecx
    xorl	%eax, %eax
    wrmsr
/* initialize IRQs, masking all */
    /* remap PIC. We have to do this even when PIC is disabled. */
    movb	$0x11, %al
    outb	%al, $PIC_MASTER
    outb	%al, $PIC_SLAVE
    movb	$0x20, %al
    outb	%al, $PIC_MASTER_DATA
    movb	$0x28, %al
    outb	%al, $PIC_SLAVE_DATA
    movb	$0x4, %al
    outb	%al, $PIC_MASTER_DATA
    movb	$0x2, %al
    outb	%al, $PIC_SLAVE_DATA
    movb	$0x1, %al
    outb	%al, $PIC_MASTER_DATA
    outb	%al, $PIC_SLAVE_DATA
    /* PIC init */
    movb	$0xFF, %al
    outb	%al, $PIC_SLAVE_DATA
    btrw	$2, %ax		/* enable cascade irq 2 */
    outb	%al, $PIC_MASTER_DATA
    movw	$16, maxirq
    /* enable NMI */
    inb		$0x70, %al
    btrw	$8, %ax
    outb	%al, $0x70
    ret

isr_irqtmrcal:
    cli
    /* first interrupt? Reset counter */
    orq		%rax, %rax
    jnz		1f
    xorq	%rcx, %rcx
    /* save previous TSC */
1:  movq	%rax, %rbx
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    xorq	%rax, %rax
    xorq	%rdx, %rdx
    rdtsc
    shlq	$32, %rdx
    addq	%rdx, %rax
    iretq
.align 16, 0x90

isr_irqtmr:
    /* no timer acknowledge needed */
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    call	isr_timer
    /* switch to a new task if any */
    movq	sched_next, %rax
    cmpq	$__PAGESIZE, %rax
    jb		1f
    cmpq	%rax, tcb_memroot
    je		1f
    movq	%rax, %cr3
1:  xorq	%rax, %rax
    movq	%rax, sched_next
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 16, 0x90

isr_irqtmrcal_rtc:
    cli
    /* first interrupt? Reset counter */
    orq		%rax, %rax
    jnz		1f
    xorq	%rcx, %rcx
    /* save previous TSC */
1:  movq	%rax, %rbx
    /* acknowledge IRQ8 in RTC */
    movb	$0x0C, %al
    outb	%al, $0x70
    jmp		1f
1:  inb		$0x71, %al
    /* reenable NMI */
    xorb	%al, %al
    outb	%al, $0x70
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    xorq	%rax, %rax
    xorq	%rdx, %rdx
    rdtsc
    shlq	$32, %rdx
    addq	%rdx, %rax
    iretq
.align 16, 0x90

isr_irqtmr_rtc:
    /* we can't afford overhead of messaging and taskswitch,
       so we use inline code here to acknoledge RTC */
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    call	isr_timer
    /* acknowledge IRQ8 in RTC */
    movb	$0x0C, %al
    outb	%al, $0x70
    jmp		1f
1:  inb		$0x71, %al
    /* reenable NMI */
    xorb	%al, %al
    outb	%al, $0x70
    /* switch to a new task if any */
    movq	sched_next, %rax
    cmpq	$__PAGESIZE, %rax
    jb		1f
    cmpq	%rax, tcb_memroot
    je		1f
    movq	%rax, %cr3
1:  xorq	%rax, %rax
    movq	%rax, sched_next
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq

/* exception handler ISRs */
.align 128, 0x90
isr_exc00divzero:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $0, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$0, %dil
    callq	exc00divzero
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc01debug:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $1, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist3
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$1, %dil
    callq	exc01debug
    addq	$64, ccb + ccb_ist3
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc02nmi:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $2, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist2
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$2, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist2
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc03chkpoint:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $3, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist3
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$3, %dil
    callq	exc03chkpoint
    addq	$64, ccb + ccb_ist3
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc04overflow:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $4, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$4, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc05bound:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $5, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$5, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc06invopcode:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $6, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$6, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc07devunavail:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $7, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$7, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc08dblfault:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $8, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist2
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$8, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist2
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc09coproc:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $9, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$9, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc10invtss:
    cli
    /* tcb->excerr = errcode; */
    popq	tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $10, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$10, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc11segfault:
    cli
    /* tcb->excerr = errcode; */
    popq	tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $11, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$11, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc12stackfault:
    cli
    /* tcb->excerr = errcode; */
    popq	tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $12, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$12, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc13genprot:
    cli
    /* tcb->excerr = errcode; */
    popq	tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $13, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$13, %dil
    callq	exc13genprot
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc14pagefault:
    cli
    /* tcb->excerr = errcode; */
    popq	tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $14, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$14, %dil
    callq	exc14pagefault
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc15unknown:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $15, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$15, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc16float:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $16, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$16, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc17alignment:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $17, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$17, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc18machinecheck:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $18, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$18, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc19double:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $19, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$19, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc20:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $20, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$20, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc21:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $21, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$21, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc22:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $22, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$22, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc23:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $23, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$23, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc24:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $24, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$24, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc25:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $25, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$25, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc26:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $26, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$26, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc27:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $27, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$27, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc28:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $28, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$28, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc29:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $29, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$29, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc30:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $30, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$30, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

isr_exc31:
    cli
    /* tcb->excerr = 0; */
    movq	$0, tcb_excerr
    
    /* fault in core */
#if DEBUG
    cmpb    $0, dbg_indump
    jnz     2f
#endif
    cmpq    $CORE_ADDRESS, (%rsp)
    jb      1f
2:  movb    $31, sys_fault
    movq    $-8, %rax
    movq    %rax, %rdi
    iretq
1:
    callq	isr_savecontext
    subq	$64, ccb + ccb_ist1
    xorq	%rdi, %rdi
    movq	(%rsp), %rsi
    movq	%rsp, %rdx
    movb	$31, %dil
    callq	excabort
    addq	$64, ccb + ccb_ist1
    callq	isr_loadcontext
    iretq
.align 128, 0x90

/* IRQ handler ISRs */
isr_irq0:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$0, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$0, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$0, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq1:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$8, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$1, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$1, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq2:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$16, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$2, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$2, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq3:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$24, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$3, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$3, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq4:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$32, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$4, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$4, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq5:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$40, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$5, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$5, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq6:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$48, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$6, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$6, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq7:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$56, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$7, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$7, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq8:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$64, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$8, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$8, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq9:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$72, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$9, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$9, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq10:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$80, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$10, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$10, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq11:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$88, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$11, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$11, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq12:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$96, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$12, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$12, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq13:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$104, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$13, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$13, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq14:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$112, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$14, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$14, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq15:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$120, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$15, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$15, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq16:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$128, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$16, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$16, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq17:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$136, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$17, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$17, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq18:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$144, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$18, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$18, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq19:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$152, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$19, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$19, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq20:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$160, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$20, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$20, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq21:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$168, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$21, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$21, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq22:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$176, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$22, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$22, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq23:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$184, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$23, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$23, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq24:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$192, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$24, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$24, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq25:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$200, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$25, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$25, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq26:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$208, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$26, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$26, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq27:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$216, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$27, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$27, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq28:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$224, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$28, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$28, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq29:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$232, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$29, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$29, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq30:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$240, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$30, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$30, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq31:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$248, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$31, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$31, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

isr_irq32:
    cli
    cld
    call	isr_savecontext
    subq	$64, ccb + ccb_ist1
    /* PIC EOI */
    movb	$0x20, %al
    outb	%al, $PIC_SLAVE
    outb	%al, $PIC_MASTER
    /* tcb->memroot == irq_routing[isr]? */
    movq	irq_routing_table, %rax
    addq	$256, %rax
    movq	(%rax), %rax
    cmpq	%rax, tcb_memroot
    je		1f
    /* no, switch to the task */
    movq	%rax, %cr3
    xorq	%rax, %rax
    xorq	%rdi, %rdi
    /* is task running? */
    cmpb	$2, tcb_state
    je		1f
    callq	sched_awake
1:  /* isr_disableirq(irq); */
    xorq	%rdi, %rdi
    movb	$32, %dil
    pushq	%rdi
    call	isr_disableirq
    /* ksend(EVT_DEST(irq_routing_table[isr]) | SYS_IRQ, irq, 0,0,0,0,0); */
    popq	%rdx
    xorq	%rsi, %rsi
    movq	$MQ_ADDRESS, %rdi
    call	ksend
    addw	$32, srand
    call	kentropy
    addq	$64, ccb + ccb_ist1
    call	isr_loadcontext
    iretq
.align 128, 0x90

